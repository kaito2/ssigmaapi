syntax = "proto3";
package sansigmaprotos;

message BidAsk {
    double price = 1;
    double amount = 2;
}

message OrderBook {
    string exchange = 1;
    string base = 2;
    string quote = 3;
    string symbol = 4;
    repeated BidAsk bids = 5;
    repeated BidAsk asks = 6;
    int64 timestamp = 7;
}

message Spread {
    string long_exchange = 1;
    string short_exchange = 2;
    string base = 3;
    string quote = 4;
    double profit_rate = 5;
    double profit = 6;
    int64 timestamp = 7;
    double invested_capital = 8;
}

message Trade {
    string symbol = 1;
    string trade_id = 2;
    string exchange = 3;
    string base = 4;
    string quote = 5;
    double price = 6;
    double amount = 7;
    int64 timestamp = 8;
    string side = 9;
}

message OrderPanel {
    enum OrderSide {
        BUY = 0;
        SELL = 1;
    }

    string exchange = 1;
    string base = 2;
    string quote = 3;
    OrderSide side = 4;
    double price = 5;
    double depth_amount = 6;
    double order_amount = 7;
}

message Arbitrage {
    enum ArbitrageType {
        SIMPLE = 0;
        TRIANGULAR = 1;
        CIRCLE = 2;
    }
    ArbitrageType type = 1;
    repeated OrderPanel orders = 2;
    double profit = 3;
    double profit_rate = 4;
    double investment = 5;
    string profit_asset = 6;
}

// API from Hub server to Pashiri

service OrderBookStreamApi {
    rpc GetOrderBook (Market) returns (stream OrderBook) {
    }
}

message Market {
    string symbol = 1;
    string exchange = 2;
}

message GetOrderBooksResponse {
    repeated OrderBook all = 1;
    int64 timestamp = 2;
}

service TradeStreamApi {
    rpc GetTrade (Market) returns (stream Trade) {
    }
}

// API from End user to Hub server

service HubApi {
    rpc GetOrderBooks (GetOrderBooksRequest) returns (stream GetOrderBooksResponse) {
    }
    rpc GetTrades (GetTradesRequest) returns (stream GetTradesResponse) {
    }
}

message GetOrderBooksRequest {
    repeated Market market = 1;
}

message GetTradesRequest {
    repeated Market markets = 1;
    // unit is seconds
    int64 velocity_windowing_size = 2;
    int64 volatility_windowing_size = 3;
    int64 volume_windowing_size = 4;
}

message TradeWithAdditionalInfo {
    Trade trade = 1;
    // 時間あたりの価格変化の移動平均
    double velocity = 2;
    double acceleration = 3;
    // 時間あたりの最大価格差
    double volatility = 4;
    double volume_base = 5;
    double volume_quote = 6;
    // 時間あたりの(buy_volume - sell_volume)/volume
    double momentum_rate = 7;
    int64 velocity_windowing_size = 8;
    int64 volatility_windowing_size = 9;
    int64 volume_windowing_size = 10;
}

message TradesWithMarket {
    Market market = 1;
    repeated TradeWithAdditionalInfo trades = 2;
}

message GetTradesResponse {
    repeated TradesWithMarket trades_with_market = 1;
}
