/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sansigmaprotos.Arbitrage', null, global);
goog.exportSymbol('proto.sansigmaprotos.Arbitrage.ArbitrageType', null, global);
goog.exportSymbol('proto.sansigmaprotos.AssetPair', null, global);
goog.exportSymbol('proto.sansigmaprotos.BidAsk', null, global);
goog.exportSymbol('proto.sansigmaprotos.OrderBook', null, global);
goog.exportSymbol('proto.sansigmaprotos.OrderBooks', null, global);
goog.exportSymbol('proto.sansigmaprotos.OrderBooksRequest', null, global);
goog.exportSymbol('proto.sansigmaprotos.OrderPanel', null, global);
goog.exportSymbol('proto.sansigmaprotos.OrderPanel.OrderSide', null, global);
goog.exportSymbol('proto.sansigmaprotos.Spread', null, global);
goog.exportSymbol('proto.sansigmaprotos.Trade', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.BidAsk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sansigmaprotos.BidAsk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.BidAsk.displayName = 'proto.sansigmaprotos.BidAsk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.BidAsk.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.BidAsk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.BidAsk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.BidAsk.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    amount: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.BidAsk}
 */
proto.sansigmaprotos.BidAsk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.BidAsk;
  return proto.sansigmaprotos.BidAsk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.BidAsk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.BidAsk}
 */
proto.sansigmaprotos.BidAsk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.BidAsk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.BidAsk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.BidAsk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.BidAsk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double price = 1;
 * @return {number}
 */
proto.sansigmaprotos.BidAsk.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.BidAsk.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double amount = 2;
 * @return {number}
 */
proto.sansigmaprotos.BidAsk.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.BidAsk.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.OrderBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sansigmaprotos.OrderBook.repeatedFields_, null);
};
goog.inherits(proto.sansigmaprotos.OrderBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.OrderBook.displayName = 'proto.sansigmaprotos.OrderBook';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sansigmaprotos.OrderBook.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.OrderBook.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.OrderBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.OrderBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchange: jspb.Message.getFieldWithDefault(msg, 1, ""),
    base: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 3, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bidsList: jspb.Message.toObjectList(msg.getBidsList(),
    proto.sansigmaprotos.BidAsk.toObject, includeInstance),
    asksList: jspb.Message.toObjectList(msg.getAsksList(),
    proto.sansigmaprotos.BidAsk.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.OrderBook}
 */
proto.sansigmaprotos.OrderBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.OrderBook;
  return proto.sansigmaprotos.OrderBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.OrderBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.OrderBook}
 */
proto.sansigmaprotos.OrderBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = new proto.sansigmaprotos.BidAsk;
      reader.readMessage(value,proto.sansigmaprotos.BidAsk.deserializeBinaryFromReader);
      msg.addBids(value);
      break;
    case 6:
      var value = new proto.sansigmaprotos.BidAsk;
      reader.readMessage(value,proto.sansigmaprotos.BidAsk.deserializeBinaryFromReader);
      msg.addAsks(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.OrderBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.OrderBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.OrderBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.sansigmaprotos.BidAsk.serializeBinaryToWriter
    );
  }
  f = message.getAsksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.sansigmaprotos.BidAsk.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string exchange = 1;
 * @return {string}
 */
proto.sansigmaprotos.OrderBook.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderBook.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string base = 2;
 * @return {string}
 */
proto.sansigmaprotos.OrderBook.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderBook.prototype.setBase = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string quote = 3;
 * @return {string}
 */
proto.sansigmaprotos.OrderBook.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderBook.prototype.setQuote = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string symbol = 4;
 * @return {string}
 */
proto.sansigmaprotos.OrderBook.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderBook.prototype.setSymbol = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated BidAsk bids = 5;
 * @return {!Array.<!proto.sansigmaprotos.BidAsk>}
 */
proto.sansigmaprotos.OrderBook.prototype.getBidsList = function() {
  return /** @type{!Array.<!proto.sansigmaprotos.BidAsk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sansigmaprotos.BidAsk, 5));
};


/** @param {!Array.<!proto.sansigmaprotos.BidAsk>} value */
proto.sansigmaprotos.OrderBook.prototype.setBidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.sansigmaprotos.BidAsk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sansigmaprotos.BidAsk}
 */
proto.sansigmaprotos.OrderBook.prototype.addBids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.sansigmaprotos.BidAsk, opt_index);
};


proto.sansigmaprotos.OrderBook.prototype.clearBidsList = function() {
  this.setBidsList([]);
};


/**
 * repeated BidAsk asks = 6;
 * @return {!Array.<!proto.sansigmaprotos.BidAsk>}
 */
proto.sansigmaprotos.OrderBook.prototype.getAsksList = function() {
  return /** @type{!Array.<!proto.sansigmaprotos.BidAsk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sansigmaprotos.BidAsk, 6));
};


/** @param {!Array.<!proto.sansigmaprotos.BidAsk>} value */
proto.sansigmaprotos.OrderBook.prototype.setAsksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.sansigmaprotos.BidAsk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sansigmaprotos.BidAsk}
 */
proto.sansigmaprotos.OrderBook.prototype.addAsks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.sansigmaprotos.BidAsk, opt_index);
};


proto.sansigmaprotos.OrderBook.prototype.clearAsksList = function() {
  this.setAsksList([]);
};


/**
 * optional int64 timestamp = 7;
 * @return {number}
 */
proto.sansigmaprotos.OrderBook.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.sansigmaprotos.OrderBook.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.Spread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sansigmaprotos.Spread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.Spread.displayName = 'proto.sansigmaprotos.Spread';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.Spread.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.Spread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.Spread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.Spread.toObject = function(includeInstance, msg) {
  var f, obj = {
    longExchange: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shortExchange: jspb.Message.getFieldWithDefault(msg, 2, ""),
    base: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 4, ""),
    profitRate: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    profit: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    investedCapital: +jspb.Message.getFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.Spread}
 */
proto.sansigmaprotos.Spread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.Spread;
  return proto.sansigmaprotos.Spread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.Spread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.Spread}
 */
proto.sansigmaprotos.Spread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongExchange(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortExchange(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProfitRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProfit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInvestedCapital(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.Spread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.Spread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.Spread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.Spread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLongExchange();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShortExchange();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProfitRate();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getProfit();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getInvestedCapital();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional string long_exchange = 1;
 * @return {string}
 */
proto.sansigmaprotos.Spread.prototype.getLongExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Spread.prototype.setLongExchange = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string short_exchange = 2;
 * @return {string}
 */
proto.sansigmaprotos.Spread.prototype.getShortExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Spread.prototype.setShortExchange = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string base = 3;
 * @return {string}
 */
proto.sansigmaprotos.Spread.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Spread.prototype.setBase = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string quote = 4;
 * @return {string}
 */
proto.sansigmaprotos.Spread.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Spread.prototype.setQuote = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double profit_rate = 5;
 * @return {number}
 */
proto.sansigmaprotos.Spread.prototype.getProfitRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Spread.prototype.setProfitRate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double profit = 6;
 * @return {number}
 */
proto.sansigmaprotos.Spread.prototype.getProfit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Spread.prototype.setProfit = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 timestamp = 7;
 * @return {number}
 */
proto.sansigmaprotos.Spread.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.sansigmaprotos.Spread.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional double invested_capital = 8;
 * @return {number}
 */
proto.sansigmaprotos.Spread.prototype.getInvestedCapital = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Spread.prototype.setInvestedCapital = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sansigmaprotos.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.Trade.displayName = 'proto.sansigmaprotos.Trade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.Trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tradeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    exchange: jspb.Message.getFieldWithDefault(msg, 3, ""),
    base: jspb.Message.getFieldWithDefault(msg, 4, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 5, ""),
    price: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    amount: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    side: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.Trade}
 */
proto.sansigmaprotos.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.Trade;
  return proto.sansigmaprotos.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.Trade}
 */
proto.sansigmaprotos.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.Trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.Trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTradeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getSide();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.sansigmaprotos.Trade.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Trade.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string trade_id = 2;
 * @return {string}
 */
proto.sansigmaprotos.Trade.prototype.getTradeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Trade.prototype.setTradeId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string exchange = 3;
 * @return {string}
 */
proto.sansigmaprotos.Trade.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Trade.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string base = 4;
 * @return {string}
 */
proto.sansigmaprotos.Trade.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Trade.prototype.setBase = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string quote = 5;
 * @return {string}
 */
proto.sansigmaprotos.Trade.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Trade.prototype.setQuote = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double price = 6;
 * @return {number}
 */
proto.sansigmaprotos.Trade.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Trade.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional double amount = 7;
 * @return {number}
 */
proto.sansigmaprotos.Trade.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Trade.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 timestamp = 8;
 * @return {number}
 */
proto.sansigmaprotos.Trade.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.sansigmaprotos.Trade.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string side = 9;
 * @return {string}
 */
proto.sansigmaprotos.Trade.prototype.getSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Trade.prototype.setSide = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.OrderPanel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sansigmaprotos.OrderPanel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.OrderPanel.displayName = 'proto.sansigmaprotos.OrderPanel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.OrderPanel.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.OrderPanel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.OrderPanel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderPanel.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchange: jspb.Message.getFieldWithDefault(msg, 1, ""),
    base: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 3, ""),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    depthAmount: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    orderAmount: +jspb.Message.getFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.OrderPanel}
 */
proto.sansigmaprotos.OrderPanel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.OrderPanel;
  return proto.sansigmaprotos.OrderPanel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.OrderPanel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.OrderPanel}
 */
proto.sansigmaprotos.OrderPanel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    case 4:
      var value = /** @type {!proto.sansigmaprotos.OrderPanel.OrderSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDepthAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOrderAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.OrderPanel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.OrderPanel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.OrderPanel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderPanel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getDepthAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getOrderAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sansigmaprotos.OrderPanel.OrderSide = {
  BUY: 0,
  SELL: 1
};

/**
 * optional string exchange = 1;
 * @return {string}
 */
proto.sansigmaprotos.OrderPanel.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderPanel.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string base = 2;
 * @return {string}
 */
proto.sansigmaprotos.OrderPanel.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderPanel.prototype.setBase = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string quote = 3;
 * @return {string}
 */
proto.sansigmaprotos.OrderPanel.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderPanel.prototype.setQuote = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional OrderSide side = 4;
 * @return {!proto.sansigmaprotos.OrderPanel.OrderSide}
 */
proto.sansigmaprotos.OrderPanel.prototype.getSide = function() {
  return /** @type {!proto.sansigmaprotos.OrderPanel.OrderSide} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.sansigmaprotos.OrderPanel.OrderSide} value */
proto.sansigmaprotos.OrderPanel.prototype.setSide = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double price = 5;
 * @return {number}
 */
proto.sansigmaprotos.OrderPanel.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.OrderPanel.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double depth_amount = 6;
 * @return {number}
 */
proto.sansigmaprotos.OrderPanel.prototype.getDepthAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.OrderPanel.prototype.setDepthAmount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional double order_amount = 7;
 * @return {number}
 */
proto.sansigmaprotos.OrderPanel.prototype.getOrderAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.OrderPanel.prototype.setOrderAmount = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.Arbitrage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sansigmaprotos.Arbitrage.repeatedFields_, null);
};
goog.inherits(proto.sansigmaprotos.Arbitrage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.Arbitrage.displayName = 'proto.sansigmaprotos.Arbitrage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sansigmaprotos.Arbitrage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.Arbitrage.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.Arbitrage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.Arbitrage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.Arbitrage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.sansigmaprotos.OrderPanel.toObject, includeInstance),
    profit: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    profitRate: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    investment: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    profitAsset: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.Arbitrage}
 */
proto.sansigmaprotos.Arbitrage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.Arbitrage;
  return proto.sansigmaprotos.Arbitrage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.Arbitrage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.Arbitrage}
 */
proto.sansigmaprotos.Arbitrage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sansigmaprotos.Arbitrage.ArbitrageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.sansigmaprotos.OrderPanel;
      reader.readMessage(value,proto.sansigmaprotos.OrderPanel.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProfit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProfitRate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInvestment(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfitAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.Arbitrage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.Arbitrage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.Arbitrage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.Arbitrage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sansigmaprotos.OrderPanel.serializeBinaryToWriter
    );
  }
  f = message.getProfit();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getProfitRate();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getInvestment();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getProfitAsset();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sansigmaprotos.Arbitrage.ArbitrageType = {
  SIMPLE: 0,
  TRIANGULAR: 1,
  CIRCLE: 2
};

/**
 * optional ArbitrageType type = 1;
 * @return {!proto.sansigmaprotos.Arbitrage.ArbitrageType}
 */
proto.sansigmaprotos.Arbitrage.prototype.getType = function() {
  return /** @type {!proto.sansigmaprotos.Arbitrage.ArbitrageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.sansigmaprotos.Arbitrage.ArbitrageType} value */
proto.sansigmaprotos.Arbitrage.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated OrderPanel orders = 2;
 * @return {!Array.<!proto.sansigmaprotos.OrderPanel>}
 */
proto.sansigmaprotos.Arbitrage.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.sansigmaprotos.OrderPanel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sansigmaprotos.OrderPanel, 2));
};


/** @param {!Array.<!proto.sansigmaprotos.OrderPanel>} value */
proto.sansigmaprotos.Arbitrage.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sansigmaprotos.OrderPanel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sansigmaprotos.OrderPanel}
 */
proto.sansigmaprotos.Arbitrage.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sansigmaprotos.OrderPanel, opt_index);
};


proto.sansigmaprotos.Arbitrage.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional double profit = 3;
 * @return {number}
 */
proto.sansigmaprotos.Arbitrage.prototype.getProfit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Arbitrage.prototype.setProfit = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double profit_rate = 4;
 * @return {number}
 */
proto.sansigmaprotos.Arbitrage.prototype.getProfitRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Arbitrage.prototype.setProfitRate = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double investment = 5;
 * @return {number}
 */
proto.sansigmaprotos.Arbitrage.prototype.getInvestment = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.sansigmaprotos.Arbitrage.prototype.setInvestment = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string profit_asset = 6;
 * @return {string}
 */
proto.sansigmaprotos.Arbitrage.prototype.getProfitAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sansigmaprotos.Arbitrage.prototype.setProfitAsset = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.AssetPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sansigmaprotos.AssetPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.AssetPair.displayName = 'proto.sansigmaprotos.AssetPair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.AssetPair.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.AssetPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.AssetPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.AssetPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.AssetPair}
 */
proto.sansigmaprotos.AssetPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.AssetPair;
  return proto.sansigmaprotos.AssetPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.AssetPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.AssetPair}
 */
proto.sansigmaprotos.AssetPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.AssetPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.AssetPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.AssetPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.AssetPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string base = 1;
 * @return {string}
 */
proto.sansigmaprotos.AssetPair.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sansigmaprotos.AssetPair.prototype.setBase = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string quote = 2;
 * @return {string}
 */
proto.sansigmaprotos.AssetPair.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sansigmaprotos.AssetPair.prototype.setQuote = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.OrderBooks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sansigmaprotos.OrderBooks.repeatedFields_, null);
};
goog.inherits(proto.sansigmaprotos.OrderBooks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.OrderBooks.displayName = 'proto.sansigmaprotos.OrderBooks';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sansigmaprotos.OrderBooks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.OrderBooks.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.OrderBooks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.OrderBooks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderBooks.toObject = function(includeInstance, msg) {
  var f, obj = {
    allList: jspb.Message.toObjectList(msg.getAllList(),
    proto.sansigmaprotos.OrderBook.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.OrderBooks}
 */
proto.sansigmaprotos.OrderBooks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.OrderBooks;
  return proto.sansigmaprotos.OrderBooks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.OrderBooks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.OrderBooks}
 */
proto.sansigmaprotos.OrderBooks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sansigmaprotos.OrderBook;
      reader.readMessage(value,proto.sansigmaprotos.OrderBook.deserializeBinaryFromReader);
      msg.addAll(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.OrderBooks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.OrderBooks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.OrderBooks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderBooks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sansigmaprotos.OrderBook.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated OrderBook all = 1;
 * @return {!Array.<!proto.sansigmaprotos.OrderBook>}
 */
proto.sansigmaprotos.OrderBooks.prototype.getAllList = function() {
  return /** @type{!Array.<!proto.sansigmaprotos.OrderBook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sansigmaprotos.OrderBook, 1));
};


/** @param {!Array.<!proto.sansigmaprotos.OrderBook>} value */
proto.sansigmaprotos.OrderBooks.prototype.setAllList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sansigmaprotos.OrderBook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sansigmaprotos.OrderBook}
 */
proto.sansigmaprotos.OrderBooks.prototype.addAll = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sansigmaprotos.OrderBook, opt_index);
};


proto.sansigmaprotos.OrderBooks.prototype.clearAllList = function() {
  this.setAllList([]);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.sansigmaprotos.OrderBooks.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sansigmaprotos.OrderBooks.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sansigmaprotos.OrderBooksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sansigmaprotos.OrderBooksRequest.repeatedFields_, null);
};
goog.inherits(proto.sansigmaprotos.OrderBooksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sansigmaprotos.OrderBooksRequest.displayName = 'proto.sansigmaprotos.OrderBooksRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sansigmaprotos.OrderBooksRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sansigmaprotos.OrderBooksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sansigmaprotos.OrderBooksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sansigmaprotos.OrderBooksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderBooksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 2, ""),
    excludeExchangeList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sansigmaprotos.OrderBooksRequest}
 */
proto.sansigmaprotos.OrderBooksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sansigmaprotos.OrderBooksRequest;
  return proto.sansigmaprotos.OrderBooksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sansigmaprotos.OrderBooksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sansigmaprotos.OrderBooksRequest}
 */
proto.sansigmaprotos.OrderBooksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addExcludeExchange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sansigmaprotos.OrderBooksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sansigmaprotos.OrderBooksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sansigmaprotos.OrderBooksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sansigmaprotos.OrderBooksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExcludeExchangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string base = 1;
 * @return {string}
 */
proto.sansigmaprotos.OrderBooksRequest.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderBooksRequest.prototype.setBase = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string quote = 2;
 * @return {string}
 */
proto.sansigmaprotos.OrderBooksRequest.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sansigmaprotos.OrderBooksRequest.prototype.setQuote = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string exclude_exchange = 3;
 * @return {!Array.<string>}
 */
proto.sansigmaprotos.OrderBooksRequest.prototype.getExcludeExchangeList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.sansigmaprotos.OrderBooksRequest.prototype.setExcludeExchangeList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sansigmaprotos.OrderBooksRequest.prototype.addExcludeExchange = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.sansigmaprotos.OrderBooksRequest.prototype.clearExcludeExchangeList = function() {
  this.setExcludeExchangeList([]);
};


goog.object.extend(exports, proto.sansigmaprotos);
